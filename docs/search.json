[
  {
    "objectID": "notes/Class4/dplyr::case_when.html",
    "href": "notes/Class4/dplyr::case_when.html",
    "title": "BST623 functions",
    "section": "",
    "text": "dplyr::case_when()\n.small[ .center[case_when (*check* ~ *response*, ..., *check* ~ *repsonse*)] + case_when does a series of logic checks, in the order listed, and assigns the response from the first check that is true. .pull-left[\n\nlaryngectomy %>%\n  mutate(\n    \\`Pathological Stage` =\n      case_when(\n        path_stg %in% c(1, 2) ~ \"Early\",\n        path_stg %in% c(3, 4) ~ \"Late\",\n        # If you didn't know this value existed...\n        # path_stg == 5 ~ \"Unknown\",\n        .default ~ \"*** PROBLEM ***\"\n      )\n  ) %>%\n  count(\\`Pathological Stage`)\n\n] .pull-right[\n\n\n\n] + case_when() often uses TRUE as the last logic check. Because it is always true, it acts like “else” or “otherwise”. + Use case_when() instead of if_else() if there is any chance the data has unexpected values. ]\n\nNA\n\n\n\nWhat it does\nNA\n\n\nDemo code\nNA\n\n\nUsefull stuff\nNA\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class4/mutate.html",
    "href": "notes/Class4/mutate.html",
    "title": "BST623 functions",
    "section": "",
    "text": "mutate() for Errors and Secret Codes\n\nanalysis <- balise %>%\n  mutate(middle = if_else(middle == \"x\", NA_character_, middle)) %>%\n  mutate(births = if_else(births < 0, NA_real_, births))\nanalysis\n\nNotice the print method for black and white puts NA inside of <>. I prefer the print method used in the console.\n\nNA\n\n\n\nWhat it does\nNA\n\n\nDemo code\nNA\n\n\nUsefull stuff\nNA\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class4/dplyr::mutate.html",
    "href": "notes/Class4/dplyr::mutate.html",
    "title": "BST623 functions",
    "section": "",
    "text": "dplyr::mutate()\n\nmutate(dataset, a_variable = something)\n\n\n\nWhat it does\n.small[ + Use mutate() to make a new variable or replace an existing one.]\n\n\nDemo code\n\nlibrary(palmerpenguins)\npenguins |>\n  dplyr::mutate(weight_lbs = body_mass_g * 0.0022046226)\n\n\n\nUsefull stuff\n.small[ + The details after the = determine the values for the variable. + if_else() and case_when() are often used for calculations. + mutate() can use commas to make/modify many variables.]\n\npalmerpenguins::penguins |> \n  mutate(\n    weight_lbs = body_mass_g * 0.0022046226`,`\n    is_male = if_else(sex == male, 1, 0)\n  )\n\n.small[ + dplyr::transmute() is like mutate but it only keeps the variables you create (or reference).]\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class4/count.html",
    "href": "notes/Class4/count.html",
    "title": "BST623 functions",
    "section": "",
    "text": "count()\n.center[count(table, variables)] dplyr can do fancy summary statistics but count() is quick, easy and useful for frequency counts: .pull-left-60[\n\nlaryngectomy %>%\n  mutate(isMale = 2 - gender ) %>%\n  mutate(sex = as.character(isMale)) %>%\n  mutate(sex = fct_recode(sex,\n                          \"Female\" = \"0\",\n                          \"Male\" = \"1\")) %>%\n  mutate(stage = fct_recode(as.character(int_stg),\n                          \"T1\" = \"1\",\n                          \"T2\" = \"2\",\n                          \"T3\" = \"3\",\n                          \"T4\" = \"4\",\n                          \"Unknown\" = \"5\")) %>%\n  `count(sex, stage)` %>%\n  arrange(sex, stage)  # this just sorts by sex then stage\n\n] .pull-right-36[\n\n\n\n]\n\nNA\n\n\n\nWhat it does\nNA\n\n\nDemo code\nNA\n\n\nUsefull stuff\nNA\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/suppressMessages.html",
    "href": "notes/Class2/suppressMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "suppressMessages()\n\nsuppressMessages(function)\n\n\n\nWhat it does\n\nThis will muffle messages produced by a chatty function.\n\n\n\nDemo code\n\nsuppressMessages(library(h2o))\n\n\n\nUsefull stuff\n\nIt may be clearer to write: library(*package*, quietly = TRUE).\nThis helps with packages that are chatty even when using the quietly = TRUE argument to library().\nThis prevents many messages from showing up in R Markdown output without suppressing other critical messages. .related-functions[]\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/stringr::word.html",
    "href": "notes/Class2/stringr::word.html",
    "title": "BST623 functions",
    "section": "",
    "text": "stringr::word()\n\nword(sentence), start, stop*{.center}\n\n\n\nWhat it does\n\nUse this to extract words from a sentence.\n\n\n\nDemo code\n\nwisdom <- \"Caesar salad was created by an Italian in Mexico.\"\nstringr::word(wisdom, 7, 9)\n\n[1] \"Italian in Mexico.\"\n\n\n\n\nUsefull stuff\n\nThis is useful for extracting the version of R for publications: stringr::word(R.version.string, 1, 3) .related-functions[]\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/scales::comma.html",
    "href": "notes/Class2/scales::comma.html",
    "title": "BST623 functions",
    "section": "",
    "text": "scales::comma()\n\nscales::comma(number)\n\n\n\nWhat it does\n\nIt adds commas to number.\n\n\n\nDemo code\n\n\nUsefull stuff\n\nscales::comma(9001)\n\n\nThis is extremely useful when preparing R Markdown reports. .related-functions[]\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/%>%.html",
    "href": "notes/Class2/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "%>%\n\n\\(thing_1\\) %>%\n\\(thing_2\\) {.center}\n\n\n\nWhat it does\n\nThe symbol %>% is called a pipe. When describing a workflow, it is spoken as “then”.\nIt sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\n\n\nDemo code\n\nnrow(medicaldata::covid_testing) %>%\n  scales::comma() %>%\n  print()\n\n\n\nUsefull stuff\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe. .related-functions[]\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/knitr::opts_chunk$set.html",
    "href": "notes/Class2/knitr::opts_chunk$set.html",
    "title": "BST623 functions",
    "section": "",
    "text": "knitr::opts_chunk$set()\n\nknitr::opts_chunk$set(option = value)\n\n\n\nWhat it does\n\nThis command allows you to set the default behavior for code chunks when knitting\nFor example, this specifies that you want to always show code but never run it\n\n\n\nDemo code\n\nknitr::opts_chunk$set(echo = TRUE, eval = FALSE)\n\n\n\nUsefull stuff\n\nThis command belongs in the “setup” chunk at the top of an R Markdown script.\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/remotes::install_github.html",
    "href": "notes/Class2/remotes::install_github.html",
    "title": "BST623 functions",
    "section": "",
    "text": "remotes::install_github()\n\nremotes::install_github(author/package)\n\n\n\nWhat it does\n\nDownloads and install a package from from www.github.com.\n\n\n\nDemo code\n\nremotes::install_github(\"RaymondBalise/rUM\")\n\n\n\nUsefull stuff\n\nUse this release to get the latest bug fixes.\nIt checks to see if there is any new content before it downloads.\nYou will need tools to build packages.\n\nThese tools ship with Mac.\nOn Windows you will need to install Rtools .related-functions[]\n\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/R.Version.html",
    "href": "notes/Class2/R.Version.html",
    "title": "BST623 functions",
    "section": "",
    "text": "R.Version()\n\nR.Version()\n\n\n\nWhat it does\n\nR.Version() returns a list of details about the version of that is currently running.\n\n\n\nDemo code\n\nR.Version()\n\n\n\nUsefull stuff\n.center[R.version.string] + R.version.string is an easier to work with description of your version of R:\n\nR.version.string\n\n\nThis is useful for extracting the version of R for publications: stringr::word(R.version.string, 1, 3) .related-functions[]\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/paste0.html",
    "href": "notes/Class2/paste0.html",
    "title": "BST623 functions",
    "section": "",
    "text": "paste0()\n\npaste0(things)\n\n\n\nWhat it does\n.small[ + It pastes together character strings without adding spaces. + The paste0() function prints a slash before quotes.\n\n\nDemo code\n.pull-left[\n\npaste0(\"The cyberman\", \" cried.\")\n\n[1] \"The cyberman cried.\"\n\npaste0('The cyberman said \"error.\"')\n\n[1] \"The cyberman said \\\"error.\\\"\"\n\nwords <- \"Hi Mom\"\npaste0(\"Ray said \", '\"', words, '\".')\n\n[1] \"Ray said \\\"Hi Mom\\\".\"\n\n\n] .related-functions[]\n.pull-right[ + The .blue[paste()] function puts a space between words. + The .blue[glue::glue()] function is an excellent alternative.\n\nwords <- \"Hi Mom\"\nglue::glue('Ray said \"{words}\".')\n\nRay said \"Hi Mom\".\n\n\n] ] .common-problems[]\n\n\nUsefull stuff\nNA\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/conflicted::conflicted_prefer.html",
    "href": "notes/Class2/conflicted::conflicted_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "conflicted::conflicted_prefer()\n\n\n.small[conflicted_prefer(“function”, “winning package”, quiet = TRUE){.center}\n\n\n\nWhat it does\n\nThe conflicted packages complains when the same function name is used in multiple packages.\nUse conflicted_prefer() to specify which version should be used by default.\n\n\n\nDemo code\n\nconflict_prefer(\"filter\", \"dplyr\", quiet = TRUE)\n\n\n\nUsefull stuff\n\nYou can overwrite this default with package::function().\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/rUM::make_project\"\".html",
    "href": "notes/Class2/rUM::make_project\"\".html",
    "title": "BST623 functions",
    "section": "",
    "text": "rUM::make_project(\"\")\n\nmake_project(“location”)\n\n\n\nWhat it does\n\nThis copies the “shell” for an academic paper into a folder/directory.\nFor example, this copies the rUM files into the current folder:\n\n\n\nDemo code\n\nrUM::make_project(\"./\")\n\n\n\nUsefull stuff\n\nIt is probably easier to use the New Project Wizard from the File menu and choose Research Project Template. .related-functions[]\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/nrow.html",
    "href": "notes/Class2/nrow.html",
    "title": "BST623 functions",
    "section": "",
    "text": "nrow()\n\nnrow(dataset)\n\n\n\nWhat it does\n\nnrow() reports the number of rows/records in a dataset (or matrix).\n\n\n\nDemo code\n\nnrow(mtcars)\n\n[1] 32\n\n\n\n\nUsefull stuff\n\nYou will likely use this with scales::comma() to include the number of observations in a dataset as part of a report.\n\n\nscales::comma(\n  nrow(medicaldata::covid_testing)\n)\n\n[1] \"15,524\"\n\n\n.related-functions[]\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/cat.html",
    "href": "notes/Class2/cat.html",
    "title": "BST623 functions",
    "section": "",
    "text": "cat()\n\ncat(things)\n\n\n\nWhat it does\n.pull-left-60[ + cat() is simpler version of the paste() function. + It does not print the vector position, like print(). + It does not prints a slash before quotes.]\n\n\nDemo code\n.pull-right-36[\n\ncat(\"The cyberman\", \"cried.\")\n\nThe cyberman cried.\n\ncat('The cyberman said \"error.\"')\n\nThe cyberman said \"error.\"\n\nwords <- \"Hi Mom\"\ncat(\"Ray said \", '\"', words, '\".')\n\nRay said  \" Hi Mom \".\n\n\n]\n\n\nUsefull stuff\n\nThe glue::glue() is an excellent alternative.\n\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/<-.html",
    "href": "notes/Class2/<-.html",
    "title": "BST623 functions",
    "section": "",
    "text": "<-\n\nthingy <- something\n\n\n\nWhat it does\n\nYou use <- to assign an object (e.g., thingy) a value (e.g., something).\nThe <- operator is pronounced “gets”.\nIn other languages this would be an =.\n\n\n\nDemo code\n\neverything <- 42\n\n\n\nUsefull stuff\n\nYou can also use -> (e.g., something -> thingy) but it violates all style guides.\n\n\n\nCommon Problems\n\nUse an =, not <- , to assign values to an argument in a function call.\n\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/mean.html",
    "href": "notes/Class2/mean.html",
    "title": "BST623 functions",
    "section": "",
    "text": "mean()\n\nmean(vector, na.rm = value)\n\n\n\nWhat it does\n\nIt calculates an average.\nBy default it returns NA is any value is missing.\nYou normally use this on a typical numeric variable but it can be use for other types of data if it can convert them to numbers (like dates/times).\n\nYou can also calculate the average on a logical (TRUE/FALSE) variable to get the percent true. Remember: 1=TRUE/YES, 0=FALSE/NO in everything you do.\n\n\n\n\nDemo code\n.small[\n\nmean(mtcars$mpg)\n\n[1] 20.09062\n\nmean(TRUE)\n\n[1] 1\n\n\n]\n\n\nUsefull stuff\n.related-functions[]\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class2/options.html",
    "href": "notes/Class2/options.html",
    "title": "BST623 functions",
    "section": "",
    "text": "options()\n\n\n.small[options(option = value){.center}\n\n\n\nWhat it does\n\nThe options() function sets the global behavior used by R, including how numbers are printed/formatted.\n\nSome packages allow you to set default behavior.\n\nFor example, you can turn off messages about how summarise() function behaves in dplyr with this option:\n\n\n\n\nDemo code\n\noptions(dplyr.summarise.inform = FALSE)\n\n\n\nUsefull stuff\n.related-functions[]\n\n\nCommon Problems\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/library.html",
    "href": "notes/Class1/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "library()\n\nlibrary(package)\n\n\n\nWhat it does\n\nThe library library() function loads a package into working memory (from long term storage on your hard disk drive or solid state drive).\n\n\n\nDemo code\n\nlibrary(survial)\n\n\n\nUsefull stuff\n\nThere are a few “meta” packages, like tidymodels and tidyverse, which load many packages from a single library() function call. ??? stats::filter and dplyr::filter\n\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/dplyr::pull.html",
    "href": "notes/Class1/dplyr::pull.html",
    "title": "BST623 functions",
    "section": "",
    "text": "dplyr::pull()\n\npull(dataset, variable)\n\n\n\nWhat it does\n\nThe pull() is used to copy of a variable out of a dataset into a new object.\n\n\n\nDemo code\n\npull(mtcars, mpg)\n\n\n\nUsefull stuff\n\nWhen it is used with the filter() function, pull() can be used to extract a single value from a dataset. This is useful when you need to extract a number, like an odds ratio or a p-value, for a report.\npull() is the only dplyr function that does not return a tibble.\n\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/class.html",
    "href": "notes/Class1/class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "class()\n\nclass(thingy)\n\n\n\nWhat it does\nIf you are not sure what something is, you can check its class by typing using the class() function in the console windowpane.\n\n\nDemo code\n\nclass(iris)\n\n\n\nUsefull stuff\n.pull-left[.center[]] .pull-right[.center[]]\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/%>%.html",
    "href": "notes/Class1/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "%>% from the magrittr Package\n\n\\(thing_1\\) %>%\n\\(thing_2\\) {.center}\n\n\n\nWhat it does\n\nThe symbol %>% is called a pipe. When describing a workflow, it is spoken as “then”.\nIt normally sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\n\n\nDemo code\n\nmtcars %>%\n  filter(mpg == 30.4)\n\n\n\nUsefull stuff\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe.\n\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/dplyr::filter.html",
    "href": "notes/Class1/dplyr::filter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "dplyr::filter()\n\n\n{.center}\n\n\n\nWhat it does\n.center[filter(tableName, logical test)] + Use filter() to pick rows/records. Inside the () you put a logic check. filter() keeps rows/records where the logic check is true.\n\n\nDemo code\n\nfilter(mtcars, am == 0)  # cars with automatic transmission\nfilter(mtcars, is.na(mpg))  # cars missing miles per gallon information\nfilter(mtcars, !is.na(mpg))  # cars not missing miles per gallon information\n\n\n\nUsefull stuff\nNA\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/suppressPackageStartupMessages.html",
    "href": "notes/Class1/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "suppressPackageStartupMessages()\n\nsuppressPackageStartupMessages(library(package))\n\n\n\nWhat it does\n\nLoad a package without printing its greeting message.\n\n\n\nDemo code\n\nsuppressPackageStartupMessages(library(tidyverse))\n\n\n\nUsefull stuff\n\nThis is very useful with the tidyverse and tidymodels. Use this if and only if you are also using the conflicted package (to avoid function name conflicts).\n\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/rm.html",
    "href": "notes/Class1/rm.html",
    "title": "BST623 functions",
    "section": "",
    "text": "rm()\n\nrm(things)\n\n\n\nWhat it does\nThe rm() function removes an object from R’s working memory.\n\n\nDemo code\n\nlife_the_universe_and_everything <- 42\nrm(life_the_universe_and_everything)\n\n\n\nUsefull stuff\nNA\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "notes/Class1/remotes::install_cran.html",
    "href": "notes/Class1/remotes::install_cran.html",
    "title": "BST623 functions",
    "section": "",
    "text": "remotes::install_cran()\n\nremotes::install_cran(“thingy”)\n\n\n\nWhat it does\n\nA better way to add packages is to use the install_cran() function from the remotes package.\n\n\n\nDemo code\n\nremotes::install_cran(\"DOPE\")\n\nPaste that line into the Console windowpane (bottom left corner) and tap the return or enter key on your keyboard.\n\n\nUsefull stuff\n\nIt will check to see the package has been updated before it bothers to do the download.\n\n\n\nCommon Problems\nNA\n\n\nRelated Functions\nNA"
  },
  {
    "objectID": "analysis.html",
    "href": "analysis.html",
    "title": "your_title_goes_here",
    "section": "",
    "text": "Introduction\n\n\nMethods\nAnalyses were conducted with R version 4.2.1 with the tidyverse (1.3.2), rUM (1.0.1), table1 (1.4.2) packages used to preprocess and summarize data.1–5\n\n\nResults\n\n\nConclusion\n\n\n\n\n\n\n\n\nReferences\n\n1. R Core Team. R: A language and environment for statistical computing [Internet]. Vienna, Austria: R Foundation for Statistical Computing; 2022. Available from: https://www.R-project.org/\n\n\n2. Wickham H. Tidyverse: Easily install and load the tidyverse [Internet]. 2022. Available from: https://CRAN.R-project.org/package=tidyverse\n\n\n3. Wickham H, Averick M, Bryan J, et al. Welcome to the tidyverse. Journal of Open Source Software 2019;4(43):1686. \n\n\n4. Balise R, Odom G, Grealis K, Cardozo F. rUM: R templates from the university of miami [Internet]. 2022. Available from: https://CRAN.R-project.org/package=rUM\n\n\n5. Rich B. table1: Tables of descriptive statistics in HTML [Internet]. 2021. Available from: https://github.com/benjaminrich/table1"
  }
]