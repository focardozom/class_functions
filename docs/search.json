[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the BST623 R Programming resource page! This site provides a collection of functions commonly used in the BST623 class, making it easier for you to access and utilize R programming tools in your coursework. Whether you’re a seasoned programmer or new to R, this page is designed to provide a comprehensive and user-friendly experience. Happy coding!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "BST623 Software Tools for Manuscript Development and Reproducible Research is a course at the University of Miami, offered by the Biostatistics program. This class is taught by professor, Dr. Raymond Balise. The course focus on the use of software tools for creating professional-quality manuscripts and conducting reproducible research. Whether you’re an experienced researcher or just starting out, BST 623 will provide valuable skills and knowledge to use R for your research."
  },
  {
    "objectID": "notes/Class1/library.html",
    "href": "notes/Class1/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "library()\nlibrary(package)] {.center} # What it does\n\nThe library library() function loads a package into working memory (from long term storage on your hard disk drive or solid state drive).\n\n\n\nDemo code\n\nlibrary(survial)\n\n\n\nUsefull stuff\n\nThere are a few “meta” packages, like tidymodels and tidyverse, which load many packages from a single library() function call. ??? stats::filter and dplyr::filter\n\n\n\n\nCommon Problems\nNA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/dplyr::pull.html",
    "href": "notes/Class1/dplyr::pull.html",
    "title": "BST623 functions",
    "section": "",
    "text": "dplyr::pull()\npull(dataset, variable)] {.center} # What it does\n\nThe pull() is used to copy of a variable out of a dataset into a new object.\n\n\n\nDemo code\n\npull(mtcars, mpg)\n\n\n\nUsefull stuff\n\nWhen it is used with the filter() function, pull() can be used to extract a single value from a dataset. This is useful when you need to extract a number, like an odds ratio or a p-value, for a report.\npull() is the only dplyr function that does not return a tibble.\n\n\n\n\nCommon Problems\nNA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/class.html",
    "href": "notes/Class1/class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "class()\nclass(thingy)] {.center} # What it does\nIf you are not sure what something is, you can check its class by typing using the class() function in the console windowpane.\n\n\nDemo code\n\nclass(iris)\n\n\n\nUsefull stuff\n.pull-left[.center[]] .pull-right[.center[]]\n\n\n\nCommon Problems\nNA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/%>%.html",
    "href": "notes/Class1/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "%>% from the magrittr Package\n\\(thing_1\\) %>%\n\\(thing_2\\) ] {.center} # What it does\n\nThe symbol %>% is called a pipe. When describing a workflow, it is spoken as “then”.\nIt normally sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\n\n\nDemo code\n\nmtcars %>%\n  filter(mpg == 30.4)\n\n\n\nUsefull stuff\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe.\n\n\n\n\nCommon Problems\nNA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/dplyr::filter.html",
    "href": "notes/Class1/dplyr::filter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "dplyr::filter()\n{.center} # What it does\n.center[filter(tableName, logical test)] + Use filter() to pick rows/records. Inside the () you put a logic check. filter() keeps rows/records where the logic check is true.\n\n\nDemo code\n\nfilter(mtcars, am == 0)  # cars with automatic transmission\nfilter(mtcars, is.na(mpg))  # cars missing miles per gallon information\nfilter(mtcars, !is.na(mpg))  # cars not missing miles per gallon information\n\n\n\n\nUsefull stuff\nNA # Common Problems NA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/suppressPackageStartupMessages.html",
    "href": "notes/Class1/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "suppressPackageStartupMessages()\nsuppressPackageStartupMessages(library(package))] {.center} # What it does\n\nLoad a package without printing its greeting message.\n\n\n\nDemo code\n\nsuppressPackageStartupMessages(library(tidyverse))\n\n\n\nUsefull stuff\n\nThis is very useful with the tidyverse and tidymodels. Use this if and only if you are also using the conflicted package (to avoid function name conflicts).\n\n\n\n\nCommon Problems\nNA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/rm.html",
    "href": "notes/Class1/rm.html",
    "title": "BST623 functions",
    "section": "",
    "text": "rm()\nrm(things)] {.center} # What it does\nThe rm() function removes an object from R’s working memory.\n\n\nDemo code\n\nlife_the_universe_and_everything <- 42\nrm(life_the_universe_and_everything)\n\n\n\n\nUsefull stuff\nNA # Common Problems NA # Related Functions NA"
  },
  {
    "objectID": "notes/Class1/remotes::install_cran.html",
    "href": "notes/Class1/remotes::install_cran.html",
    "title": "BST623 functions",
    "section": "",
    "text": "remotes::install_cran()\nremotes::install_cran(“thingy”)] {.center} # What it does\n\nA better way to add packages is to use the install_cran() function from the remotes package.\n\n\n\nDemo code\n\nremotes::install_cran(\"DOPE\")\n\nPaste that line into the Console windowpane (bottom left corner) and tap the return or enter key on your keyboard.\n\n\nUsefull stuff\n\nIt will check to see the package has been updated before it bothers to do the download.\n\n\n\n\nCommon Problems\nNA # Related Functions NA"
  }
]