[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the BST623 R Programming resource page! This site provides a collection of functions commonly used in the BST623 class, making it easier for you to access and utilize R programming tools in your coursework. Whether you’re a seasoned programmer or new to R, this page is designed to provide a comprehensive and user-friendly experience. Happy coding!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "BST623 Software Tools for Manuscript Development and Reproducible Research is a course at the University of Miami, offered by the Biostatistics program. This class is taught by professor, Dr. Raymond Balise. The course focus on the use of software tools for creating professional-quality manuscripts and conducting reproducible research. Whether you’re an experienced researcher or just starting out, BST 623 will provide valuable skills and knowledge to use R for your research."
  },
  {
    "objectID": "notes/Class1/library.html",
    "href": "notes/Class1/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: library\n\n\nNotes:\n\n\n.blue[library()]\n.center[.blue[library](*package*)] + The library .blue[library()] function loads a package into working memory (from long term storage on your hard disk drive or solid state drive).\n\nlibrary(survial)\n\n\nThere are a few “meta” packages, like tidymodels and tidyverse, which load many packages from a single .blue[library()] function call. ??? stats::filter and dplyr::filter"
  },
  {
    "objectID": "notes/Class1/dplyr::pull.html",
    "href": "notes/Class1/dplyr::pull.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: dplyr::pull\n\n\nNotes:\n\n\n.blue[dplyr::pull()]\n.center[.blue[pull](*dataset*, *variable*)] + The .blue[pull()] is used to copy of a variable out of a dataset into a new object.\n\npull(mtcars, mpg)\n\n\nWhen it is used with the .blue[filter()] function, .blue[pull()] can be used to extract a single value from a dataset. This is useful when you need to extract a number, like an odds ratio or a p-value, for a report.\n.blue[pull()] is the only .blue[dplyr] function that does not return a tibble."
  },
  {
    "objectID": "notes/Class1/class.html",
    "href": "notes/Class1/class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "class()\n\nclass(thingy)\n\n\n\nWhat it does\nIf you are not sure what something is, you can check its class by typing using the class() function in the console windowpane. For example, to check the class of the mysterious iris object type this:\n\n\nDemo code\n\n\nUseful stuff\n\n\nCommon problems\n\n\nRelated functions"
  },
  {
    "objectID": "notes/Class1/%>%.html",
    "href": "notes/Class1/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: %>%\n\n\nNotes:\n\n\n.blue[%>%] from the .blue[magrittr] Package\n.center[ \\(thing_1\\) .blue[%>%]\n\\(thing_2\\)] + The symbol .blue[%>%] is called a pipe. When describing a workflow, it is spoken as “then”. + It normally sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\nmtcars %>% \n  filter(mpg == 30.4) \n\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe."
  },
  {
    "objectID": "notes/Class1/dplyr::filter.html",
    "href": "notes/Class1/dplyr::filter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: dplyr::filter\n\n\nNotes:\n\n\n.blue[dplyr::filter()]\n.center[.blue[filter](tableName, logical test)] + Use .blue[filter()] to pick rows/records. + Inside the .blue[()] you put a logic check. + .blue[filter()] keeps rows/records where the logic check is true.\n\nfilter(mtcars, am == 0)  # cars with automatic transmission\nfilter(mtcars, is.na(mpg))  # cars missing miles per gallon information\nfilter(mtcars, !is.na(mpg))  # cars not missing miles per gallon information"
  },
  {
    "objectID": "notes/Class1/suppressPackageStartupMessages.html",
    "href": "notes/Class1/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: suppressPackageStartupMessages\n\n\nNotes:\n\n\n.blue[suppressPackageStartupMessages()]\n.center[.blue[suppressPackageStartupMessages](library(*package*))] + Load a package without printing its greeting message.\n\nsuppressPackageStartupMessages(library(tidyverse))\n\n\nThis is very useful with the .blue[tidyverse] and .blue[tidymodels]. Use this if and only if you are also using the .blue[conflicted] package (to avoid function name conflicts)."
  },
  {
    "objectID": "notes/Class1/rm.html",
    "href": "notes/Class1/rm.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: rm\n\n\nNotes:\n\n\n.blue[rm()]\n.center[.blue[rm](*things*)] + The .blue[rm()] function removes an object from R’s working memory.\n\nlife_the_universe_and_everything <- 42\nrm(life_the_universe_and_everything)"
  },
  {
    "objectID": "notes/Class1/remotes::install_cran.html",
    "href": "notes/Class1/remotes::install_cran.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Function name: remotes::install_cran\n\n\nNotes:\n\n\n.blue[remotes::install_cran()]\nA better way to add packages is to use the .blue[install_cran()] function from the .blue[remotes] package: .center[.blue[remotes::install\\_cran](\"*thingy*\")] For example to install the “DOPE” package:\n\nremotes::install_cran(\"DOPE\")\n\nPaste that line into the Console windowpane (bottom left corner) and tap the return or enter key on your keyboard. It will check to see the package has been updated before it bothers to do the download."
  }
]