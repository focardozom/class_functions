[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome",
    "section": "",
    "text": "Welcome to the BST623 R Programming resource page! This site provides a collection of functions commonly used in the BST623 class, making it easier for you to access and utilize R programming tools in your coursework. Whether you’re a seasoned programmer or new to R, this page is designed to provide a comprehensive and user-friendly experience. Happy coding!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "BST623 Software Tools for Manuscript Development and Reproducible Research is a course at the University of Miami, offered by the Biostatistics program. This class is taught by professor, Dr. Raymond Balise. The course focus on the use of software tools for creating professional-quality manuscripts and conducting reproducible research. Whether you’re an experienced researcher or just starting out, BST 623 will provide valuable skills and knowledge to use R for your research."
  },
  {
    "objectID": "notes/Class3/library.html",
    "href": "notes/Class3/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: library()\nEmpty"
  },
  {
    "objectID": "notes/Class3/function.html",
    "href": "notes/Class3/function.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: function()\nEmpty"
  },
  {
    "objectID": "notes/Class3/suppressMessages.html",
    "href": "notes/Class3/suppressMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressMessages()\nEmpty"
  },
  {
    "objectID": "notes/Class3/conflicted_prefer.html",
    "href": "notes/Class3/conflicted_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: conflicted_prefer()\n\n\n[conflicted::conflicted_prefer()]\n.small[ [[conflicted_prefer](\"*function*\", \"*winning package*\", quiet = TRUE)]] + The conflicted packages complains when the same function name is used in multiple packages. + Use conflicted_prefer() to specify which version should be used by default.\n\nconflict_prefer(\"filter\", \"dplyr\", quiet = TRUE)\n\n\nYou can overwrite this default with package::function()."
  },
  {
    "objectID": "notes/Class3/Bigg.html",
    "href": "notes/Class3/Bigg.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: Bigg()\nEmpty"
  },
  {
    "objectID": "notes/Class3/norw.html",
    "href": "notes/Class3/norw.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: norw()\nEmpty"
  },
  {
    "objectID": "notes/Class3/some_big_fancy_thing_that_took_10_minutes_to_type.html",
    "href": "notes/Class3/some_big_fancy_thing_that_took_10_minutes_to_type.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: some_big_fancy_thing_that_took_10_minutes_to_type()\nEmpty"
  },
  {
    "objectID": "notes/Class3/install_cran.html",
    "href": "notes/Class3/install_cran.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: install_cran()\nEmpty"
  },
  {
    "objectID": "notes/Class3/summarise.html",
    "href": "notes/Class3/summarise.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: summarise()\nEmpty"
  },
  {
    "objectID": "notes/Class3/Class.html",
    "href": "notes/Class3/Class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: Class()\nEmpty"
  },
  {
    "objectID": "notes/Class3/comma.html",
    "href": "notes/Class3/comma.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: comma()\nEmpty"
  },
  {
    "objectID": "notes/Class3/%>%.html",
    "href": "notes/Class3/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: %>%\n\n\n[%>%]\n[ \\(thing_1\\) [%>%]\n\\(thing_2\\)] + The symbol [%>%] is called a pipe. When describing a workflow, it is spoken as “then”. + It sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\nnrow(medicaldata::covid_testing) %>% \n  scales::comma() %>% \n  print()\n\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe."
  },
  {
    "objectID": "notes/Class3/time.html",
    "href": "notes/Class3/time.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: time()\nEmpty"
  },
  {
    "objectID": "notes/Class3/paste.html",
    "href": "notes/Class3/paste.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: paste()\nEmpty"
  },
  {
    "objectID": "notes/Class3/tidymodels_prefer.html",
    "href": "notes/Class3/tidymodels_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tidymodels_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class3/c.html",
    "href": "notes/Class3/c.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: c()\nEmpty"
  },
  {
    "objectID": "notes/Class3/paste0.html",
    "href": "notes/Class3/paste0.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: paste0()\nEmpty"
  },
  {
    "objectID": "notes/Class3/source.html",
    "href": "notes/Class3/source.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: source()\nEmpty"
  },
  {
    "objectID": "notes/Class3/suppressPackageStartupMessages.html",
    "href": "notes/Class3/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressPackageStartupMessages()\nEmpty"
  },
  {
    "objectID": "notes/Class3/use_tile_view.html",
    "href": "notes/Class3/use_tile_view.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: use_tile_view()\nEmpty"
  },
  {
    "objectID": "notes/Class3/f.html",
    "href": "notes/Class3/f.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: f()\nEmpty"
  },
  {
    "objectID": "notes/Class3/build_pdf.html",
    "href": "notes/Class3/build_pdf.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: build_pdf()\nEmpty"
  },
  {
    "objectID": "notes/Class3/opts_chunk$set().html",
    "href": "notes/Class3/opts_chunk$set().html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: opts_chunk\\(set() # [`knitr::opts_chunk\\)set()] [[knitr::opts_chunk$set](option = value)`]\n\nThis command allows you to set the default behavior for code chunks when knitting\nFor example, this specifies that you want to always show code but never run it\n\n\nknitr::opts_chunk$set(echo=TRUE, eval=FALSE)\n\n\nThis command belongs in the “setup” chunk at the top of an R Markdown script."
  },
  {
    "objectID": "notes/Class3/format.html",
    "href": "notes/Class3/format.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: format()\nEmpty"
  },
  {
    "objectID": "notes/Class3/word.html",
    "href": "notes/Class3/word.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: word()\nEmpty"
  },
  {
    "objectID": "notes/Class3/ref.html",
    "href": "notes/Class3/ref.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ref()\nEmpty"
  },
  {
    "objectID": "notes/Class3/nrow.html",
    "href": "notes/Class3/nrow.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: nrow()\n\n\n[nrow()]\n[[nrow](*dataset*)] + [nrow()] reports the number of rows/records in a dataset (or matrix).\n\nnrow(mtcars)\n\n[1] 32\n\n\n\nYou will likely use this with [scales::comma()] to include the number of observations in a dataset as part of a report.\n\n\nscales::comma(\n  nrow(medicaldata::covid_testing)\n)\n\n[1] \"15,524\""
  },
  {
    "objectID": "notes/Class3/ji.html",
    "href": "notes/Class3/ji.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ji()\nEmpty"
  },
  {
    "objectID": "notes/Class3/Version.html",
    "href": "notes/Class3/Version.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: Version()\nEmpty"
  },
  {
    "objectID": "notes/Class3/cat.html",
    "href": "notes/Class3/cat.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: cat()\n\n\n[cat()]\n[[cat](*things*)] .pull-left-60[ + [cat()] is simpler version of the [paste()] function. + It does not print the vector position, like [1]. + It does not prints a slash before quotes. + The [glue::glue()] is an excellent alternative.] .pull-right-36[\n\ncat(\"The cyberman\", \"cried.\")\n\nThe cyberman cried.\n\ncat('The cyberman said \"error.\"')\n\nThe cyberman said \"error.\"\n\nwords <- \"Hi Mom\"\ncat(\"Ray said \", '\"', words, '\".')\n\nRay said  \" Hi Mom \".\n\n\n]"
  },
  {
    "objectID": "notes/Class3/packages.html",
    "href": "notes/Class3/packages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: packages()\nEmpty"
  },
  {
    "objectID": "notes/Class3/print.html",
    "href": "notes/Class3/print.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: print()\nEmpty"
  },
  {
    "objectID": "notes/Class3/<-.html",
    "href": "notes/Class3/<-.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: <-\n\n\n[<-]\n[[*thingy* <- *something*]] + You use [<-] to assign an object (e.g., thingy) a value (e.g., something). + The [<-] operator is pronounced “gets.” + In other languages this would be an =.\n\neverything <- 42\n\n\nUse an [=], not [<-] , to assign values to an argument in a function call.\nYou can also use [->] (e.g., something [->] thingy) but it violates all style guides."
  },
  {
    "objectID": "notes/Class3/R.Version().html",
    "href": "notes/Class3/R.Version().html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: R.Version()\n\n\n[R.Version()]\n[[R.Version]()] + [R.Version()] returns a list of details about the version of that is currently running.\n\nR.Version()\n\n[[R.version.string]] + [R.version.string] is an easier to work with description of your version of R:\n\nR.version.string\n\n\nThis is useful for extracting the version of R for publications: stringr::word(R.version.string, 1, 3)"
  },
  {
    "objectID": "notes/Class3/set.html",
    "href": "notes/Class3/set.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: set()\nEmpty"
  },
  {
    "objectID": "notes/Class3/mean.html",
    "href": "notes/Class3/mean.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: mean()\n\n\n[mean()]\n[[mean](*vector*, na.rm = *value*)] + It calculates an average. + By default it returns NA is any value is missing. + You normally use this on a typical numeric variable but it can be use for other types of data if it can convert them to numbers (like dates/times). + You can also calculate the average on a logical (TRUE/FALSE) variable to get the percent true. Remember: 1=TRUE/YES, 0=FALSE/NO in everything you do. .small[\n\nmean(mtcars$mpg)\n\n[1] 20.09062\n\nmean(TRUE)\n\n[1] 1\n\n\n]"
  },
  {
    "objectID": "notes/Class3/options.html",
    "href": "notes/Class3/options.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: options()\n\n\n[options()]\n.small[ [[options](*option* = *value*)]] + The [options()] function sets the global behavior used by R, including how numbers are printed/formatted.\n+ Some packages allow you to set default behavior. + For example, you can turn off messages about how [summarise()] function behaves in [dplyr] with this option:\n\noptions(dplyr.summarise.inform=FALSE)"
  },
  {
    "objectID": "notes/Class3/ggplotlibrary.html",
    "href": "notes/Class3/ggplotlibrary.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ggplotlibrary()\nEmpty"
  },
  {
    "objectID": "notes/Class3/make_project.html",
    "href": "notes/Class3/make_project.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: make_project()\nEmpty"
  },
  {
    "objectID": "notes/Class3/install_github.html",
    "href": "notes/Class3/install_github.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: install_github()\nEmpty"
  },
  {
    "objectID": "notes/Class3/conflict_prefer.html",
    "href": "notes/Class3/conflict_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: conflict_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class3/glue.html",
    "href": "notes/Class3/glue.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: glue()\nEmpty"
  },
  {
    "objectID": "notes/Class4/library.html",
    "href": "notes/Class4/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: library()\nEmpty"
  },
  {
    "objectID": "notes/Class4/tribble.html",
    "href": "notes/Class4/tribble.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tribble()\nEmpty"
  },
  {
    "objectID": "notes/Class4/suppressMessages.html",
    "href": "notes/Class4/suppressMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressMessages()\nEmpty"
  },
  {
    "objectID": "notes/Class4/varaible.html",
    "href": "notes/Class4/varaible.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: varaible()\nEmpty"
  },
  {
    "objectID": "notes/Class4/var.html",
    "href": "notes/Class4/var.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: var()\nEmpty"
  },
  {
    "objectID": "notes/Class4/if_else.html",
    "href": "notes/Class4/if_else.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: if_else()\n\n\n[dplyr::if_else()]\n[[if_else](*check*, *true*, *false*)] + if_else() checks the truth of a logic check on a variable/vector and returns the true argument if it is true or the false argument if it is not true.\n\nlaryngectomy %>%\n  mutate(  # does the initial stage agree with final pathology staging?\n    path_result = if_else(int_stg != path_stg, \"Changed\", \"Same\")\n  ) %>%\n  select(int_stg, path_stg, path_result)\n\n\nThe logic check can involve any number of variables.\n[if_else()] is dangerous because unexpected values can be binned in the false level/group."
  },
  {
    "objectID": "notes/Class4/transmute.html",
    "href": "notes/Class4/transmute.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: transmute()\n\n\n[transmute()] only keeps the mutation.\nThis is just way too much typing:\n\nlaryngectomy %>%\n   select(nk_dissection)  %>%\n   mutate(hadND = 2 - nk_dissection)\n\nInstead, just transmute. It will drop all the other variables:\n\nlaryngectomy %>%\n  `transmute(hadND = 2 - nk_dissection)`"
  },
  {
    "objectID": "notes/Class4/left_join.html",
    "href": "notes/Class4/left_join.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: left_join()\nEmpty"
  },
  {
    "objectID": "notes/Class4/queryinner_join.html",
    "href": "notes/Class4/queryinner_join.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: queryinner_join()\nEmpty"
  },
  {
    "objectID": "notes/Class4/class.html",
    "href": "notes/Class4/class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: class()\nEmpty"
  },
  {
    "objectID": "notes/Class4/min.html",
    "href": "notes/Class4/min.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: min()\nEmpty"
  },
  {
    "objectID": "notes/Class4/fct_recode.html",
    "href": "notes/Class4/fct_recode.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: fct_recode()\nEmpty"
  },
  {
    "objectID": "notes/Class4/group_by.html",
    "href": "notes/Class4/group_by.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: group_by()\n\n\n[group_by()] \\(_1\\)\n[[group_by](tableName, groupingVariable)] Before dplyr 1.1 to get groups you would tag the dataset as having a grouping variable:\n\nlaryngectomy %>%\n  select(gender, length_fu) %>% \n  `group_by(gender)` # marks the grouping variable"
  },
  {
    "objectID": "notes/Class4/glimpse.html",
    "href": "notes/Class4/glimpse.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: glimpse()\nEmpty"
  },
  {
    "objectID": "notes/Class4/across.html",
    "href": "notes/Class4/across.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: across()\n\n\n[dplyr::across()] with [dplyr::mutate()]\n[[across](varaibles), function] + The [across()] function with [mutate()] does the same mutation to multiple variables.\n\nlaryngectomy %>% \n  # Convert categorical character variavbles to be factors.\n  mutate(\n    across(gender:sor, factor)\n  ) \n\n\nThe [across()] function is used with [dplyr::summarise] to apply the same summary statistics to many variables."
  },
  {
    "objectID": "notes/Class4/ends_with.html",
    "href": "notes/Class4/ends_with.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ends_with()\nEmpty"
  },
  {
    "objectID": "notes/Class4/mode.html",
    "href": "notes/Class4/mode.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: mode()\nEmpty"
  },
  {
    "objectID": "notes/Class4/pivot_wider.html",
    "href": "notes/Class4/pivot_wider.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: pivot_wider()\n\n\n[pivot_wider()] is a thing.\n\nThere is function called pivot_wider() that will take long data and make it wider.\nI rarely use it. Know it exists."
  },
  {
    "objectID": "notes/Class4/time.html",
    "href": "notes/Class4/time.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: time()\nEmpty"
  },
  {
    "objectID": "notes/Class4/distinct.html",
    "href": "notes/Class4/distinct.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: distinct()\nEmpty"
  },
  {
    "objectID": "notes/Class4/tally.html",
    "href": "notes/Class4/tally.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tally()\n\n\n[tally()]\n[[tally](dataset, variable)] It adds up the values: .pull-left-60[\n\nsexVars <- laryngectomy %>%\n  mutate(isMale = 2 - gender ) %>%\n  mutate(sex = as.character(isMale)) %>%\n  mutate(sex = fct_recode(sex, \n                          \"Female\" = \"0\", \n                          \"Male\" = \"1\"))\n  sexVars %>% `tally(gender)`  # adds up 1s and 2s\n  sexVars %>% `tally(isMale)`  # adds up 0s and 1s\n# sexVars %>% tally(sex)  # can't sum up \"Male\" and \"Female\"\n\n] .pull-right-36[\n\n\n\n] ??? This was a good trick… r theTallyTable, eval = FALSE r theTallyTableOut, ref.label=“theTallyTable”, echo=FALSE"
  },
  {
    "objectID": "notes/Class4/starts_with.html",
    "href": "notes/Class4/starts_with.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: starts_with()\nEmpty"
  },
  {
    "objectID": "notes/Class4/summarize.html",
    "href": "notes/Class4/summarize.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: summarize()\n\n\n[summarize()] to make rows/records with statistics. \\(_1\\)\n.small[[[summarize](tableName, newName = aggregateFunction)\n[summarize](tableName, aSum = sum(a), anAvg = mean(b), theVar = var(b))] + Make a new dataset with summary statistics + Use it to take a vector and output a single number + Only keeps the new variables + Base aggregate functions + min max mean median quantile sd var IQR diff length sum + dplyr aggregate functions + first last nth n n_distinct .pull-left-60[\n\nlaryngectomy %>%\n{{  summarize(theMinFU = min(length_fu),}}\n{{            theMeanFU = mean(length_fu),}}\n{{            theMaxFU = max(length_fu))}}\n\n] .pull-right-36[\n\n\n\n] ]"
  },
  {
    "objectID": "notes/Class4/mutate.html",
    "href": "notes/Class4/mutate.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: mutate()\n\n\n[mutate()] to Add New Columns/Variables \\(_1\\)\n[mutate] The original data used 1 to mean yes and 2 to mean no.\nData should .red[always] use 1 to code yes and 0 to code no. Fix it!\nBinary indicator variables should .red[always] start with a verb.\n\nlaryngectomy %>%  # start with everybody with a laryngectomy then     \n   select(nk_dissection)  `%>%`  # keep only one variable then  \n   `mutate(hadND = 2 - nk_dissection)`  # add a had neck dissection indicator"
  },
  {
    "objectID": "notes/Class4/tidymodels_prefer.html",
    "href": "notes/Class4/tidymodels_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tidymodels_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class4/c.html",
    "href": "notes/Class4/c.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: c()\nEmpty"
  },
  {
    "objectID": "notes/Class4/tibble.html",
    "href": "notes/Class4/tibble.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tibble()\nEmpty"
  },
  {
    "objectID": "notes/Class4/case_when.html",
    "href": "notes/Class4/case_when.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: case_when()\n\n\n[dplyr::case_when()]\n.small[ [[case_when] (*check* ~ *response*, ..., *check* ~ *repsonse*)] + [case_when] does a series of logic checks, in the order listed, and assigns the response from the first check that is true. .pull-left[\n\nlaryngectomy %>%\n  mutate(\n    \\`Pathological Stage` =\n      case_when(\n        path_stg %in% c(1, 2) ~ \"Early\",\n        path_stg %in% c(3, 4) ~ \"Late\",\n        # If you didn't know this value existed...\n        # path_stg == 5 ~ \"Unknown\", \n        .default ~ \"*** PROBLEM ***\"\n      )\n  ) %>%\n  count(\\`Pathological Stage`)\n\n] .pull-right[\n\n\n\n] + [case_when()] often uses TRUE as the last logic check. Because it is always true, it acts like “else” or “otherwise”. + Use [case_when()] instead of [if_else()] if there is any chance the data has unexpected values. ]"
  },
  {
    "objectID": "notes/Class4/source.html",
    "href": "notes/Class4/source.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: source()\nEmpty"
  },
  {
    "objectID": "notes/Class4/pull.html",
    "href": "notes/Class4/pull.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: pull()\n\n\n[pull()] makes a vector.\n[[pull](tableName, variableName)] Rarely, you will want to pull a column out of a data frame and save it as a vector. [pull()] is the only dplyro verb that does not return a tibble.\n\nyes_no_ND <- laryngectomy %>%\n  mutate(hadND = 2 - nk_dissection) %>% \n  pull(hadND)\n\n[]"
  },
  {
    "objectID": "notes/Class4/suppressPackageStartupMessages.html",
    "href": "notes/Class4/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressPackageStartupMessages()\nEmpty"
  },
  {
    "objectID": "notes/Class4/select.html",
    "href": "notes/Class4/select.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: select()\nEmpty"
  },
  {
    "objectID": "notes/Class4/sum.html",
    "href": "notes/Class4/sum.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: sum()\nEmpty"
  },
  {
    "objectID": "notes/Class4/use_tile_view.html",
    "href": "notes/Class4/use_tile_view.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: use_tile_view()\nEmpty"
  },
  {
    "objectID": "notes/Class4/build_pdf.html",
    "href": "notes/Class4/build_pdf.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: build_pdf()\nEmpty"
  },
  {
    "objectID": "notes/Class4/set_knit_hooks.html",
    "href": "notes/Class4/set_knit_hooks.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: set_knit_hooks()\nEmpty"
  },
  {
    "objectID": "notes/Class4/arrange.html",
    "href": "notes/Class4/arrange.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: arrange()\nEmpty"
  },
  {
    "objectID": "notes/Class4/format.html",
    "href": "notes/Class4/format.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: format()\nEmpty"
  },
  {
    "objectID": "notes/Class4/typeof.html",
    "href": "notes/Class4/typeof.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: typeof()\n\n\n[typeof()]\n.small[ [[typeof](*vector*)] [[typeof](*dataset$variable*)] + The “type” of an object helps determine what behaviors an object can do.\n+ You can not take the mean of a character variable. + These are the typical types that are used in datasets: .pull-left[ + int = “integer” for numbers without decimals + dbl = “double” for numbers with decimals + lgl = “logical” for true/false + date = “date”] .pull-right[ + chr = “character” for character string + fct = “factor” for categories that are not ordered + ord = “ordered” for ordered categories]\n\ntypeof(pi)\ntypeof(R.version$nickname)\n\n\nOther “types” are used to categorize functions and other complex objects.\nR also uses [mode()] to describe type. It groups “integer” and “double” as “numeric”. ]"
  },
  {
    "objectID": "notes/Class4/rep.html",
    "href": "notes/Class4/rep.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: rep()\nEmpty"
  },
  {
    "objectID": "notes/Class4/coalesce.html",
    "href": "notes/Class4/coalesce.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: coalesce()\n\n\n[dplyr::coalesce()]\n[[coalesce](varaible(s))] + The [coalesce()] function chooses the first not-missing value from a set of variables.\n\nlaryngectomy %>% \n  # Get day of worst outcome: death, reoccurrence, visit, or huge negative number\n  mutate(\n    outcome_day = coalesce(death_fu, recur_fu, length_fu, -99999999)\n  ) \n\n\nIf you include a huge outlier as the last option, it will make it easy to spot missing values."
  },
  {
    "objectID": "notes/Class4/character.html",
    "href": "notes/Class4/character.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: character()\nEmpty"
  },
  {
    "objectID": "notes/Class4/ji.html",
    "href": "notes/Class4/ji.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ji()\nEmpty"
  },
  {
    "objectID": "notes/Class4/set.html",
    "href": "notes/Class4/set.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: set()\nEmpty"
  },
  {
    "objectID": "notes/Class4/mean.html",
    "href": "notes/Class4/mean.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: mean()\nEmpty"
  },
  {
    "objectID": "notes/Class4/max.html",
    "href": "notes/Class4/max.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: max()\nEmpty"
  },
  {
    "objectID": "notes/Class4/pivot_longer.html",
    "href": "notes/Class4/pivot_longer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: pivot_longer()\nEmpty"
  },
  {
    "objectID": "notes/Class4/vignette.html",
    "href": "notes/Class4/vignette.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: vignette()\nEmpty"
  },
  {
    "objectID": "notes/Class4/rownames_to_column.html",
    "href": "notes/Class4/rownames_to_column.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: rownames_to_column()\nEmpty"
  },
  {
    "objectID": "notes/Class4/options.html",
    "href": "notes/Class4/options.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: options()\nEmpty"
  },
  {
    "objectID": "notes/Class4/ggplotlibrary.html",
    "href": "notes/Class4/ggplotlibrary.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ggplotlibrary()\nEmpty"
  },
  {
    "objectID": "notes/Class4/inner_join.html",
    "href": "notes/Class4/inner_join.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: inner_join()\nEmpty"
  },
  {
    "objectID": "notes/Class4/filter.html",
    "href": "notes/Class4/filter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: filter()\nEmpty"
  },
  {
    "objectID": "notes/Class4/count.html",
    "href": "notes/Class4/count.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: count()\n\n\n[count()]\n[[count](table, variables)] dplyr can do fancy summary statistics but [count()] is quick, easy and useful for frequency counts: .pull-left-60[\n\nlaryngectomy %>%\n  mutate(isMale = 2 - gender ) %>%\n  mutate(sex = as.character(isMale)) %>%\n  mutate(sex = fct_recode(sex, \n                          \"Female\" = \"0\", \n                          \"Male\" = \"1\")) %>% \n  mutate(stage = fct_recode(as.character(int_stg), \n                          \"T1\" = \"1\", \n                          \"T2\" = \"2\",\n                          \"T3\" = \"3\",\n                          \"T4\" = \"4\",\n                          \"Unknown\" = \"5\")) %>% \n  `count(sex, stage)` %>% \n  arrange(sex, stage)  # this just sorts by sex then stage\n\n] .pull-right-36[\n\n\n\n]"
  },
  {
    "objectID": "notes/Class4/head.html",
    "href": "notes/Class4/head.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: head()\nEmpty"
  },
  {
    "objectID": "notes/Class4/conflict_prefer.html",
    "href": "notes/Class4/conflict_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: conflict_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class4/kable.html",
    "href": "notes/Class4/kable.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: kable()\nEmpty"
  },
  {
    "objectID": "notes/Class2/library.html",
    "href": "notes/Class2/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: library()\nEmpty"
  },
  {
    "objectID": "notes/Class2/function.html",
    "href": "notes/Class2/function.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: function()\nEmpty"
  },
  {
    "objectID": "notes/Class2/suppressMessages.html",
    "href": "notes/Class2/suppressMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressMessages()\nEmpty"
  },
  {
    "objectID": "notes/Class2/conflicted_prefer.html",
    "href": "notes/Class2/conflicted_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: conflicted_prefer()\n\n\n[conflicted::conflicted_prefer()]\n.small[ [[conflicted_prefer](\"*function*\", \"*winning package*\", quiet = TRUE)]] + The conflicted packages complains when the same function name is used in multiple packages. + Use conflicted_prefer() to specify which version should be used by default.\n\nconflict_prefer(\"filter\", \"dplyr\", quiet = TRUE)\n\n\nYou can overwrite this default with package::function()."
  },
  {
    "objectID": "notes/Class2/Bigg.html",
    "href": "notes/Class2/Bigg.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: Bigg()\nEmpty"
  },
  {
    "objectID": "notes/Class2/norw.html",
    "href": "notes/Class2/norw.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: norw()\nEmpty"
  },
  {
    "objectID": "notes/Class2/some_big_fancy_thing_that_took_10_minutes_to_type.html",
    "href": "notes/Class2/some_big_fancy_thing_that_took_10_minutes_to_type.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: some_big_fancy_thing_that_took_10_minutes_to_type()\nEmpty"
  },
  {
    "objectID": "notes/Class2/install_cran.html",
    "href": "notes/Class2/install_cran.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: install_cran()\nEmpty"
  },
  {
    "objectID": "notes/Class2/summarise.html",
    "href": "notes/Class2/summarise.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: summarise()\nEmpty"
  },
  {
    "objectID": "notes/Class2/Class.html",
    "href": "notes/Class2/Class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: Class()\nEmpty"
  },
  {
    "objectID": "notes/Class2/comma.html",
    "href": "notes/Class2/comma.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: comma()\nEmpty"
  },
  {
    "objectID": "notes/Class2/%>%.html",
    "href": "notes/Class2/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: %>%\n\n\n[%>%]\n[ \\(thing_1\\) [%>%]\n\\(thing_2\\)] + The symbol [%>%] is called a pipe. When describing a workflow, it is spoken as “then”. + It sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\nnrow(medicaldata::covid_testing) %>% \n  scales::comma() %>% \n  print()\n\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe."
  },
  {
    "objectID": "notes/Class2/time.html",
    "href": "notes/Class2/time.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: time()\nEmpty"
  },
  {
    "objectID": "notes/Class2/paste.html",
    "href": "notes/Class2/paste.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: paste()\nEmpty"
  },
  {
    "objectID": "notes/Class2/tidymodels_prefer.html",
    "href": "notes/Class2/tidymodels_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tidymodels_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class2/c.html",
    "href": "notes/Class2/c.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: c()\nEmpty"
  },
  {
    "objectID": "notes/Class2/paste0.html",
    "href": "notes/Class2/paste0.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: paste0()\nEmpty"
  },
  {
    "objectID": "notes/Class2/source.html",
    "href": "notes/Class2/source.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: source()\nEmpty"
  },
  {
    "objectID": "notes/Class2/suppressPackageStartupMessages.html",
    "href": "notes/Class2/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressPackageStartupMessages()\nEmpty"
  },
  {
    "objectID": "notes/Class2/use_tile_view.html",
    "href": "notes/Class2/use_tile_view.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: use_tile_view()\nEmpty"
  },
  {
    "objectID": "notes/Class2/f.html",
    "href": "notes/Class2/f.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: f()\nEmpty"
  },
  {
    "objectID": "notes/Class2/build_pdf.html",
    "href": "notes/Class2/build_pdf.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: build_pdf()\nEmpty"
  },
  {
    "objectID": "notes/Class2/opts_chunk$set().html",
    "href": "notes/Class2/opts_chunk$set().html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: opts_chunk\\(set() # [`knitr::opts_chunk\\)set()] [[knitr::opts_chunk$set](option = value)`]\n\nThis command allows you to set the default behavior for code chunks when knitting\nFor example, this specifies that you want to always show code but never run it\n\n\nknitr::opts_chunk$set(echo=TRUE, eval=FALSE)\n\n\nThis command belongs in the “setup” chunk at the top of an R Markdown script."
  },
  {
    "objectID": "notes/Class2/format.html",
    "href": "notes/Class2/format.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: format()\nEmpty"
  },
  {
    "objectID": "notes/Class2/word.html",
    "href": "notes/Class2/word.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: word()\nEmpty"
  },
  {
    "objectID": "notes/Class2/ref.html",
    "href": "notes/Class2/ref.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ref()\nEmpty"
  },
  {
    "objectID": "notes/Class2/nrow.html",
    "href": "notes/Class2/nrow.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: nrow()\n\n\n[nrow()]\n[[nrow](*dataset*)] + [nrow()] reports the number of rows/records in a dataset (or matrix).\n\nnrow(mtcars)\n\n[1] 32\n\n\n\nYou will likely use this with [scales::comma()] to include the number of observations in a dataset as part of a report.\n\n\nscales::comma(\n  nrow(medicaldata::covid_testing)\n)\n\n[1] \"15,524\""
  },
  {
    "objectID": "notes/Class2/ji.html",
    "href": "notes/Class2/ji.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ji()\nEmpty"
  },
  {
    "objectID": "notes/Class2/Version.html",
    "href": "notes/Class2/Version.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: Version()\nEmpty"
  },
  {
    "objectID": "notes/Class2/cat.html",
    "href": "notes/Class2/cat.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: cat()\n\n\n[cat()]\n[[cat](*things*)] .pull-left-60[ + [cat()] is simpler version of the [paste()] function. + It does not print the vector position, like [1]. + It does not prints a slash before quotes. + The [glue::glue()] is an excellent alternative.] .pull-right-36[\n\ncat(\"The cyberman\", \"cried.\")\n\nThe cyberman cried.\n\ncat('The cyberman said \"error.\"')\n\nThe cyberman said \"error.\"\n\nwords <- \"Hi Mom\"\ncat(\"Ray said \", '\"', words, '\".')\n\nRay said  \" Hi Mom \".\n\n\n]"
  },
  {
    "objectID": "notes/Class2/packages.html",
    "href": "notes/Class2/packages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: packages()\nEmpty"
  },
  {
    "objectID": "notes/Class2/print.html",
    "href": "notes/Class2/print.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: print()\nEmpty"
  },
  {
    "objectID": "notes/Class2/<-.html",
    "href": "notes/Class2/<-.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: <-\n\n\n[<-]\n[[*thingy* <- *something*]] + You use [<-] to assign an object (e.g., thingy) a value (e.g., something). + The [<-] operator is pronounced “gets.” + In other languages this would be an =.\n\neverything <- 42\n\n\nUse an [=], not [<-] , to assign values to an argument in a function call.\nYou can also use [->] (e.g., something [->] thingy) but it violates all style guides."
  },
  {
    "objectID": "notes/Class2/R.Version().html",
    "href": "notes/Class2/R.Version().html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: R.Version()\n\n\n[R.Version()]\n[[R.Version]()] + [R.Version()] returns a list of details about the version of that is currently running.\n\nR.Version()\n\n[[R.version.string]] + [R.version.string] is an easier to work with description of your version of R:\n\nR.version.string\n\n\nThis is useful for extracting the version of R for publications: stringr::word(R.version.string, 1, 3)"
  },
  {
    "objectID": "notes/Class2/set.html",
    "href": "notes/Class2/set.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: set()\nEmpty"
  },
  {
    "objectID": "notes/Class2/mean.html",
    "href": "notes/Class2/mean.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: mean()\n\n\n[mean()]\n[[mean](*vector*, na.rm = *value*)] + It calculates an average. + By default it returns NA is any value is missing. + You normally use this on a typical numeric variable but it can be use for other types of data if it can convert them to numbers (like dates/times). + You can also calculate the average on a logical (TRUE/FALSE) variable to get the percent true. Remember: 1=TRUE/YES, 0=FALSE/NO in everything you do. .small[\n\nmean(mtcars$mpg)\n\n[1] 20.09062\n\nmean(TRUE)\n\n[1] 1\n\n\n]"
  },
  {
    "objectID": "notes/Class2/options.html",
    "href": "notes/Class2/options.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: options()\n\n\n[options()]\n.small[ [[options](*option* = *value*)]] + The [options()] function sets the global behavior used by R, including how numbers are printed/formatted.\n+ Some packages allow you to set default behavior. + For example, you can turn off messages about how [summarise()] function behaves in [dplyr] with this option:\n\noptions(dplyr.summarise.inform=FALSE)"
  },
  {
    "objectID": "notes/Class2/ggplotlibrary.html",
    "href": "notes/Class2/ggplotlibrary.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ggplotlibrary()\nEmpty"
  },
  {
    "objectID": "notes/Class2/make_project.html",
    "href": "notes/Class2/make_project.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: make_project()\nEmpty"
  },
  {
    "objectID": "notes/Class2/install_github.html",
    "href": "notes/Class2/install_github.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: install_github()\nEmpty"
  },
  {
    "objectID": "notes/Class2/conflict_prefer.html",
    "href": "notes/Class2/conflict_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: conflict_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class2/glue.html",
    "href": "notes/Class2/glue.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: glue()\nEmpty"
  },
  {
    "objectID": "notes/Class1/library.html",
    "href": "notes/Class1/library.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: library()\n\n\n[library()]\n[[library](*package*)] + The library [library()] function loads a package into working memory (from long term storage on your hard disk drive or solid state drive).\n\nlibrary(survial)\n\n\nThere are a few “meta” packages, like tidymodels and tidyverse, which load many packages from a single [library()] function call. ??? stats::filter and dplyr::filter"
  },
  {
    "objectID": "notes/Class1/informationfilter.html",
    "href": "notes/Class1/informationfilter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: informationfilter()\nEmpty"
  },
  {
    "objectID": "notes/Class1/install_cran.html",
    "href": "notes/Class1/install_cran.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: install_cran()\n\n\n[remotes::install_cran()]\nA better way to add packages is to use the [install_cran()] function from the [remotes] package: [[remotes::install\\_cran](\"*thingy*\")] For example to install the “DOPE” package:\n\nremotes::install_cran(\"DOPE\")\n\nPaste that line into the Console windowpane (bottom left corner) and tap the return or enter key on your keyboard. It will check to see the package has been updated before it bothers to do the download."
  },
  {
    "objectID": "notes/Class1/transmissionfilter.html",
    "href": "notes/Class1/transmissionfilter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: transmissionfilter()\nEmpty"
  },
  {
    "objectID": "notes/Class1/class.html",
    "href": "notes/Class1/class.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: class()\n\n\n[class()]\n[[class](_thingy_)] If you are not sure what something is, you can check its class by typing using the [class()] function in the console windowpane. For example, to check the class of the mysterious iris object type this: .pull-left[[]] .pull-right[[]]"
  },
  {
    "objectID": "notes/Class1/%>%.html",
    "href": "notes/Class1/%>%.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: %>%\n\n\n[%>%] from the [magrittr] Package\n[ \\(thing_1\\) [%>%]\n\\(thing_2\\)] + The symbol [%>%] is called a pipe. When describing a workflow, it is spoken as “then”. + It normally sends the output from \\(thing_1\\) to the first argument of \\(thing_2\\).\n\nmtcars %>% \n  filter(mpg == 30.4) \n\n\nMany functions can be connected in a pipeline.\nStart code after a pipe on a new line.\nIndent all lines of code two spaces after the first pipe."
  },
  {
    "objectID": "notes/Class1/tidymodels_prefer.html",
    "href": "notes/Class1/tidymodels_prefer.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: tidymodels_prefer()\nEmpty"
  },
  {
    "objectID": "notes/Class1/42rm.html",
    "href": "notes/Class1/42rm.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: 42rm()\nEmpty"
  },
  {
    "objectID": "notes/Class1/na.html",
    "href": "notes/Class1/na.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: na()\nEmpty"
  },
  {
    "objectID": "notes/Class1/source.html",
    "href": "notes/Class1/source.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: source()\nEmpty"
  },
  {
    "objectID": "notes/Class1/pull.html",
    "href": "notes/Class1/pull.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: pull()\n\n\n[dplyr::pull()]\n[[pull](*dataset*, *variable*)] + The [pull()] is used to copy of a variable out of a dataset into a new object.\n\npull(mtcars, mpg)\n\n\nWhen it is used with the [filter()] function, [pull()] can be used to extract a single value from a dataset. This is useful when you need to extract a number, like an odds ratio or a p-value, for a report.\n[pull()] is the only [dplyr] function that does not return a tibble."
  },
  {
    "objectID": "notes/Class1/suppressPackageStartupMessages.html",
    "href": "notes/Class1/suppressPackageStartupMessages.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: suppressPackageStartupMessages()\n\n\n[suppressPackageStartupMessages()]\n[[suppressPackageStartupMessages](library(*package*))] + Load a package without printing its greeting message.\n\nsuppressPackageStartupMessages(library(tidyverse))\n\n\nThis is very useful with the [tidyverse] and [tidymodels]. Use this if and only if you are also using the [conflicted] package (to avoid function name conflicts)."
  },
  {
    "objectID": "notes/Class1/use_tile_view.html",
    "href": "notes/Class1/use_tile_view.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: use_tile_view()\nEmpty"
  },
  {
    "objectID": "notes/Class1/build_pdf.html",
    "href": "notes/Class1/build_pdf.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: build_pdf()\nEmpty"
  },
  {
    "objectID": "notes/Class1/coauthor.html",
    "href": "notes/Class1/coauthor.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: coauthor()\nEmpty"
  },
  {
    "objectID": "notes/Class1/ji.html",
    "href": "notes/Class1/ji.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ji()\nEmpty"
  },
  {
    "objectID": "notes/Class1/url.html",
    "href": "notes/Class1/url.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: url()\nEmpty"
  },
  {
    "objectID": "notes/Class1/set.html",
    "href": "notes/Class1/set.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: set()\nEmpty"
  },
  {
    "objectID": "notes/Class1/rm.html",
    "href": "notes/Class1/rm.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: rm()\n\n\n[rm()]\n[[rm](*things*)] + The [rm()] function removes an object from R’s working memory.\n\nlife_the_universe_and_everything <- 42\nrm(life_the_universe_and_everything)"
  },
  {
    "objectID": "notes/Class1/ggplotlibrary.html",
    "href": "notes/Class1/ggplotlibrary.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: ggplotlibrary()\nEmpty"
  },
  {
    "objectID": "notes/Class1/filter.html",
    "href": "notes/Class1/filter.html",
    "title": "BST623 functions",
    "section": "",
    "text": "Notes for: filter()\n\n\n[dplyr::filter()]\n[[filter](tableName, logical test)] + Use [filter()] to pick rows/records. + Inside the [()] you put a logic check. + [filter()] keeps rows/records where the logic check is true.\n\nfilter(mtcars, am == 0)  # cars with automatic transmission\nfilter(mtcars, is.na(mpg))  # cars missing miles per gallon information\nfilter(mtcars, !is.na(mpg))  # cars not missing miles per gallon information"
  }
]