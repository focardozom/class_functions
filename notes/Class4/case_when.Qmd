# Function name: case_when()
# Notes:
# [`dplyr::case_when()`]
.small[
[[`case_when`] (`*check* ~ *response*, ..., *check* ~ *repsonse*`)]
+ [`case_when`] does a series of logic checks, in the order listed, and assigns the response from the first check that is true.
.pull-left[
```{r eval=FALSE}
laryngectomy %>%
  mutate(
    \`Pathological Stage` =
      case_when(
        path_stg %in% c(1, 2) ~ "Early",
        path_stg %in% c(3, 4) ~ "Late",
        # If you didn't know this value existed...
        # path_stg == 5 ~ "Unknown", 
        .default ~ "*** PROBLEM ***"
      )
  ) %>%
  count(\`Pathological Stage`)
```
]
.pull-right[
```{r eval = FALSE, echo=FALSE}
laryngectomy %>%
  mutate(
    `Pathological Stage` =
      case_when(
        path_stg %in% c(1, 2) ~ "Early",
        path_stg %in% c(3, 4) ~ "Late",
        # If you didn't know this value existed...
        # path_stg == 5 ~ "Unknown", 
        TRUE ~ "*** PROBLEM ***"
      )
  ) %>%
  count(`Pathological Stage`)
```
]
+ [`case_when()`] often uses `TRUE` as the last logic check.  Because it is always true, it acts like "else" or "otherwise". 
+ Use [`case_when()`] instead of [`if_else()`] if there is *any* chance the data has unexpected values.
]
---


# Introduction to R's case_when Function

The R programming language offers many useful functions, one of which is case_when. This function can be used to evaluate multiple conditions, and act on the outcome of them. In this article, we will look at the purpose of case_when, the package containing it, common uses, and an example of how to use it in R.

## What Package Contains case_when?

The case_when function is part of the dplyr package. This package is an efficient data manipulation tool that has become a