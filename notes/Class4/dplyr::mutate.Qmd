# [`dplyr::mutate()`]{.blue}
 
 
### [mutate]{.blue}(*dataset*, *a_variable* = *something*){.center} 
 
# What it does 

.small[
+ Use [`mutate()`]{.blue} to make a new variable or replace an existing one.
]
  
 
# Demo code 

```{r, eval=FALSE, include=FALSE}
conflicted::conflicts_prefer(palmerpenguins::penguins)
```
```{r, eval=FALSE}
library(palmerpenguins)
penguins |>
  dplyr::mutate(weight_lbs = body_mass_g * 0.0022046226)
```
  
 
# Usefull stuff 

.small[
+ The details after the `=` determine the values for the variable.
  + [`if_else()`]{.blue} and [`case_when()`]{.blue} are often used for calculations.
+ [`mutate()`]{.blue} can use commas to make/modify many variables.
]
```{r eval=FALSE}
palmerpenguins::penguins |> 
  mutate(
    weight_lbs = body_mass_g * 0.0022046226`,`
    is_male = if_else(sex == male, 1, 0)
  )
```
.small[
+ [`dplyr::transmute()`]{.blue} is like mutate but it only keeps the variables you create (or reference).
]
  
 
# Common Problems 
NA  
 
# Related Functions 
NA  
