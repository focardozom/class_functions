# [`dplyr::case_when()`]{.blue}
 
 
### 
[case_when]{.blue} (*check* ~ *response*, ..., *check* ~ *repsonse*){.center} 
 
# What it does 

+ [`case_when`]{.blue} does a series of logic checks, in the order listed, and assigns the response from the first check that is true.
  
 
# Demo code 

```{r include=FALSE, warning=FALSE, message=FALSE}
library(tidyverse)
laryngectomy <- lr4ds::laryngectomy
```

```{r eval=FALSE}
laryngectomy |> 
  mutate(
    \`Pathological Stage` =
      case_when(
        path_stg %in% c(1, 2) ~ "Early",
        path_stg %in% c(3, 4) ~ "Late",
        # If you didn't know this value existed...
        # path_stg == 5 ~ "Unknown",
        .default ~ "*** PROBLEM ***"
      )
  ) |> 
  count(\`Pathological Stage`)
```
]
.pull-right[
```{r echo=FALSE}
laryngectomy |> 
  mutate(
    `Pathological Stage` =
      case_when(
        path_stg %in% c(1, 2) ~ "Early",
        path_stg %in% c(3, 4) ~ "Late",
        # If you didn't know this value existed...
        # path_stg == 5 ~ "Unknown",
        TRUE ~ "*** PROBLEM ***"
      )
  ) |> 
  count(`Pathological Stage`)
```
]
  
 
# Usefull stuff 

+ [`case_when()`]{.blue} often uses `TRUE` as the last logic check.  Because it is always true, it acts like "else" or "otherwise". 
+ Use [`case_when()`]{.blue} instead of [`if_else()`]{.blue} if there is *any* chance the data has unexpected values.
]
.related-functions[]
  
 
# Common Problems 

  
 
# Related Functions 
NA  
